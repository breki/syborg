<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Flubu</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Can be applied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be applied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:JetBrains.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the <c>forEach</c> method is a source template available over all values
            of enumerable types, producing ordinary C# <c>foreach</c> statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:JetBrains.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="M:Flubu.Beeper.Beep(Flubu.MessageBeepType)">
            <summary>
            Sounds a beep.
            </summary>
            <param name="messageBeepType">Type of the message beep.</param>
        </member>
        <member name="T:Flubu.Builds.BuildProps">
            <summary>
            Various build properties stored in session that are needed for building.
            </summary>
        </member>
        <member name="F:Flubu.Builds.BuildProps.MSBuildToolsVersion">
            <summary>
            Version of the MSBuild tools to use for compilation.
            </summary>
            <remarks>
            If not defined, the latest available version will be used.
            Use the version numbers as defined in Registry path HKLM\SOFTWARE\Microsoft\MSBuild\ToolsVersions (2.0, 3.5, 4.0, 12.0 etc.)
            </remarks>
        </member>
        <member name="F:Flubu.Builds.BuildProps.ProjectVersionFileName">
            <summary>
            File name of where project version is read from. Property is optional.
            If not set ProductId is used for part of project file name.
            It can also contain relative path to the file name.
            </summary>
        </member>
        <member name="F:Flubu.Builds.BuildProps.SpeechDisabled">
            <summary>
            Boolean property which, if set to <c>true</c>, disables the "build successful/build failed" speech at the end of the build.
            </summary>
        </member>
        <member name="F:Flubu.Builds.BuildProps.SolutionFileName">
            <summary>
            The solution file name. It can also contain relative path to the file name.
            </summary>
        </member>
        <member name="T:Flubu.Builds.BuildTargets">
            <summary>
            Built in build targets.
            </summary>
        </member>
        <member name="P:Flubu.Builds.Tasks.NuGetTasks.PublishNuGetPackageTask.NuGetServerUrl">
            <summary>
            Gets or sets the server URL.
            </summary>
            <remarks>Starting with NuGet 3.4.2, this is a mandatory parameter unless 
            <c>DefaultPushSource</c> config value is set in the NuGet config file.
            The default <see cref="P:Flubu.Builds.Tasks.NuGetTasks.PublishNuGetPackageTask.NuGetServerUrl"/> value is <c>https://www.nuget.org/api/v2/package</c>.</remarks>
        </member>
        <member name="T:Flubu.Builds.Tasks.TestingTasks.NUnitTask">
            <summary>
            Run NUnit tests with NUnit console runner.
            </summary>
        </member>
        <member name="M:Flubu.Builds.Tasks.TestingTasks.NUnitTask.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Builds.Tasks.TestingTasks.NUnitTask"/> class.
            </summary>
            <param name="testAssemblyFileName">File name of the assembly containing the test code.</param>
            <param name="nunitConsoleFileName">Path to the NUnit-console.exe</param>
            <param name="workingDirectory">Working directory to use.</param>
        </member>
        <member name="M:Flubu.Builds.Tasks.TestingTasks.NUnitTask.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Builds.Tasks.TestingTasks.NUnitTask"/> class.
            </summary>
            <param name="nunitConsoleFileName">full file path to nunit console</param>
            <param name="projectName">Unit test project name.</param>
        </member>
        <member name="M:Flubu.Builds.Tasks.TestingTasks.NUnitTask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Builds.Tasks.TestingTasks.NUnitTask"/> class.
            </summary>
            <param name="projectName">Unit test project name.</param>
        </member>
        <member name="M:Flubu.Builds.Tasks.TestingTasks.NUnitTask.ForNunitV2(System.String)">
            <summary>
            Initializes NunitTask with default command line options for nunit V2.
            </summary>
            <param name="projectName">Unit test project name.</param>
            <returns>New instance of nunit task</returns>
        </member>
        <member name="M:Flubu.Builds.Tasks.TestingTasks.NUnitTask.ForNunitV3(System.String)">
            <summary>
            Initializes NunitTask with default command line options for nunit V3.
            </summary>
            <param name="projectName">Unit test project name.</param>
            <returns>New instance of nunit task</returns>
        </member>
        <member name="P:Flubu.Builds.Tasks.TestingTasks.NUnitTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="M:Flubu.Builds.Tasks.TestingTasks.NUnitTask.ExcludeCategory(System.String)">
            <summary>
            Excludes category from test. Can be ussed multiple times. Supported only in nunit v3 and above. For v2 use <see cref="M:Flubu.Builds.Tasks.TestingTasks.NUnitTask.AddNunitCommandLineOption(System.String)"/>
            </summary>
            <param name="category">The Categorie to be excluded</param>
            <returns>The NunitTask</returns>
        </member>
        <member name="M:Flubu.Builds.Tasks.TestingTasks.NUnitTask.IncludeCategory(System.String)">
            <summary>
            Include category in test. Can be ussed multiple times. Supported only in nunit v3 and above. For v2 use <see cref="M:Flubu.Builds.Tasks.TestingTasks.NUnitTask.AddNunitCommandLineOption(System.String)"/>
            </summary>
            <param name="category">The category to be included</param>
            <returns>The NunitTask</returns>
        </member>
        <member name="M:Flubu.Builds.Tasks.TestingTasks.NUnitTask.SetTargetFramework(System.String)">
            <summary>
            Sets the .NET framework NUnit console should run under. Supported only in nunit v3 and above. For v2 use <see cref="M:Flubu.Builds.Tasks.TestingTasks.NUnitTask.AddNunitCommandLineOption(System.String)"/>
            </summary>
            <param name="framework">Targeted .net framework</param>
            <returns>The NunitTask</returns>
        </member>
        <member name="M:Flubu.Builds.Tasks.TestingTasks.NUnitTask.AddNunitCommandLineOption(System.String)">
            <summary>
             Add nunit command line option. Can be used multiple times.
            </summary>
            <param name="nunitCmdOption">nunit command line option to be added.</param>
            <returns>The NunitTask</returns>
        </member>
        <member name="M:Flubu.Builds.Tasks.TestingTasks.NUnitTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Abstract method defining the actual work for a task.
            </summary>
            <remarks>This method has to be implemented by the inheriting task.</remarks>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="F:Flubu.Builds.Tasks.TestingTasks.NUnitTask.workingDirectory">
            <summary>
            unit test working directory.
            </summary>
        </member>
        <member name="F:Flubu.Builds.Tasks.TestingTasks.NUnitTask.testAssemblyFileName">
            <summary>
             assembly to test.
            </summary>
        </member>
        <member name="F:Flubu.Builds.Tasks.TestingTasks.NUnitTask.categories">
            <summary>
             test categories that will be included/excluded in tests.
            </summary>
        </member>
        <member name="F:Flubu.Builds.Tasks.TestingTasks.NUnitTask.targetFramework">
            <summary>
            .NET framework NUnit console should run under.
            </summary>
        </member>
        <member name="T:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask">
            <summary>
            Runs NUnit tests in combination with dotCover test coverage analysis.
            </summary>
            <remarks>
            <para>
            The task uses dotCover command line tool to run NUnit command line runner
            which executes tests for the specified assembly or C# project.
            </para>
            <para>
            The task uses <see cref="T:Flubu.Builds.Tasks.NuGetTasks.DownloadNugetPackageInUserRepositoryTask"/> to download dotCover command
            line tool into the running user's local application data directory. If the tool is already there,
            the task skips downloading it.
            </para>
            </remarks>
        </member>
        <member name="M:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask"/> class that
            will execute tests in the specified <see cref="F:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask.testAssemblyFileNames"/> list of test assemblies using 
            the specified NUnit test runner executable.
            </summary>
            <param name="nunitRunnerFileName">The file path to NUnit's console runner.</param>
            <param name="testAssemblyFileNames">The list of of file paths to the assemblies containing unit tests.</param>
        </member>
        <member name="M:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask.#ctor(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask"/> class that
            will execute tests in the specified <see cref="F:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask.testAssemblyFileNames"/> list of test assemblies using 
            the specified NUnit test runner executable.
            </summary>
            <param name="nunitRunnerFileName">The file path to NUnit's console runner.</param>
            <param name="testAssemblyFileNames">The list of of file paths to the assemblies containing unit tests.</param>
        </member>
        <member name="P:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask.FailBuildOnViolations">
            <summary>
            Gets or sets a value indicating whether the build should fail if the test coverage of any
            class is below <see cref="P:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask.MinRequiredCoverage"/>. 
            </summary>
            <remarks>
            If <see cref="P:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask.FailBuildOnViolations"/>
            is set to <c>false</c>, the task will only print out information about violating classes
            without failing the build.
            The default value is <c>true</c>.
            </remarks>
        </member>
        <member name="P:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask.MinRequiredCoverage">
            <summary>
            Gets or sets the minimum required test coverage percentage. 
            If any class has the test coverage below this value and <see cref="P:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask.FailBuildOnViolations"/>
            is set to <c>true</c>, the task will fail the build. 
            </summary>
            <remarks>
            The default value is 75%.
            </remarks>
        </member>
        <member name="P:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask.NUnitCmdLineOptions">
            <summary>
            Gets or sets the command line options for NUnit console runner (as a single string).
            </summary>
            <remarks>
            The default options are <c>/labels /nodots</c>.
            </remarks>
        </member>
        <member name="P:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask.DotCoverFilters">
            <summary>
            Gets or sets the dotCover filters that will be passed to dotCover's <c>/Filters</c> command line parameter.
            </summary>
            <remarks>
            The default filters are set to <c>-:module=*.Tests;-:class=*Contract;-:class=*Contract`*</c>.
            For more information, visit <a href="https://www.jetbrains.com/dotcover/help/dotCover__Console_Runner_Commands.html">here</a>.
            </remarks>
            <seealso cref="P:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask.DotCoverAttributeFilters"/>
        </member>
        <member name="P:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask.DotCoverAttributeFilters">
            <summary>
            Gets or sets the dotCover attribute filters that will be passed to dotCover's <c>/AttributeFilters</c> command line parameter.
            Attribute filters tell dotCover to skip the analysis of any code that has the specified attribute(s) applied.
            </summary>
            <remarks>
            The default attribute filters are set to <c>"*.ExcludeFromCodeCoverageAttribute"</c>.
            For more information, visit <a href="https://www.jetbrains.com/dotcover/help/dotCover__Console_Runner_Commands.html">here</a>.
            </remarks>
            <seealso cref="P:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask.DotCoverFilters"/>
        </member>
        <member name="P:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask.CoverageXmlReportFileName">
            <summary>
            Gets the path to the generated dotCover test coverage XML report.
            </summary>
            <seealso cref="P:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask.CoverageHtmlReportFileName"/>
        </member>
        <member name="P:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask.CoverageHtmlReportFileName">
            <summary>
            Gets the path to the generated dotCover test coverage HTML report.
            </summary>
            <seealso cref="P:Flubu.Builds.Tasks.TestingTasks.NUnitWithDotCoverTask.CoverageXmlReportFileName"/>
        </member>
        <member name="T:Flubu.Builds.VSSolutionBrowsing.VSProjectItem">
            <summary>
            Holds information about content items inside of a VisualStudio project.
            </summary>
        </member>
        <member name="T:Flubu.Builds.VSSolutionBrowsing.VSProject">
            <summary>
            Represents a VisualStudio project.
            </summary>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProject.Configurations">
            <summary>
            Gets a read-only collection of project configurations.
            </summary>
            <value>A read-only collection of project configurations.</value>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProject.Items">
            <summary>
            Gets a read-only collection of all .cs files in the solution.
            </summary>
            <value>A read-only collection of all the .cs files in the solution.</value>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProject.Properties">
            <summary>
            Gets a read-only collection of project properties.
            </summary>
            <value>A read-only collection of project properties.</value>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProject.FindConfiguration(System.String)">
            <summary>
            Finds the VisualStudio project configuration specified by a condition.
            </summary>
            <param name="condition">The condition which identifies the configuration 
            (example: " '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ").</param>
            <returns><see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectConfiguration"/> object if found; <c>null</c> if no configuration was found that meets the
            specified condition.</returns>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProject.Load(System.String)">
            <summary>
            Loads the specified project file name.
            </summary>
            <param name="projectFileName">Name of the project file.</param>
            <returns>VSProject class containing project information.</returns>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProject.GetSingleTypeItems(System.String)">
            <summary>
            Gets the List of VSProjectItem single type items.
            </summary>
            <param name="getItemType">Type of the item.</param>
            <returns>List of items of specific itemType.</returns>
        </member>
        <member name="T:Flubu.Builds.VSSolutionBrowsing.VSProjectConfiguration">
            <summary>
            Contains information of compile configuration.
            </summary>
        </member>
        <member name="T:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo">
            <summary>
            Holds information about a VisualStudio project.
            </summary>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo.Project">
            <summary>
            Gets or sets the <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProject"/> object holding the detailed information about this VisualStudio
            project.
            </summary>
            <value>The <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProject"/> object .</value>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo.ProjectDirectoryPath">
            <summary>
            Gets the path to the directory where the project file is located.
            </summary>
            <value>The project directory path.</value>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo.ProjectFileName">
            <summary>
            Gets the name of the project file. The file name is relative to the solution's directory.
            </summary>
            <remarks>The full path to the project file can be retrieved using the <see cref="P:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo.ProjectFileNameFull"/>
            property.</remarks>
            <value>The name of the project file.</value>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo.ProjectFileNameFull">
            <summary>
            Gets the full path to the project file.
            </summary>
            <value>The full path to the project file.</value>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo.GetProjectOutputPath(System.String)">
            <summary>
            Gets the output path for a specified VisualStudio project. The output path is relative
            to the directory where the project file is located.
            </summary>
            <param name="buildConfiguration">The build configuration.</param>
            <returns>
            The output path or <c>null</c> if the project is not compatible.
            </returns>
            <exception cref="T:System.ArgumentException">The method could not extract the data from the project file.</exception>
        </member>
        <member name="T:Flubu.Builds.VSSolutionBrowsing.VSProjectType">
            <summary>
            Contains information about a specific VisualStudio project type.
            </summary>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProjectType.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectType"/> class.
            </summary>
            <param name="projectTypeGuid">The project type GUID.</param>
            <param name="projectTypeName">Name of the project type.</param>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProjectType.CSharpProjectType">
            <summary>
            Gets the <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectType"/> for C# projects.
            </summary>
            <value>The <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectType"/> for C# projects.</value>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProjectType.ProjectTypeGuid">
            <summary>
            Gets the project type GUID.
            </summary>
            <value>The project type GUID.</value>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProjectType.ProjectTypeName">
            <summary>
            Gets the name of the project type.
            </summary>
            <value>The name of the project type.</value>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSProjectType.SolutionFolderProjectType">
            <summary>
            Gets the <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectType"/> for solution folders.
            </summary>
            <value>The <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectType"/> for solution folders.</value>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProjectType.Equals(Flubu.Builds.VSSolutionBrowsing.VSProjectType)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">
                An object to compare with this object.
            </param>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProjectType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProjectType.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProjectType.op_Equality(Flubu.Builds.VSSolutionBrowsing.VSProjectType,Flubu.Builds.VSSolutionBrowsing.VSProjectType)">
            <summary>
            Compares the two objects.
            </summary>
            <param name="left">The left object.</param>
            <param name="right">The right object.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProjectType.op_Inequality(Flubu.Builds.VSSolutionBrowsing.VSProjectType,Flubu.Builds.VSSolutionBrowsing.VSProjectType)">
            <summary>
            Compares the two objects.
            </summary>
            <param name="left">The left object.</param>
            <param name="right">The right object.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:Flubu.Builds.VSSolutionBrowsing.VSProjectTypesDictionary">
            <summary>
            A dictionary of registered VisualStudio project types.
            </summary>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProjectTypesDictionary.RegisterProjectType(Flubu.Builds.VSSolutionBrowsing.VSProjectType)">
            <summary>
            Registers a new type of the VisualStudio project.
            </summary>
            <param name="projectType">><see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectType"/> object to be registered.</param>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSProjectTypesDictionary.FindProjectType(System.Guid)">
            <summary>
            Tries to find <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectType"/> object for a specific VisualStudio project type Guid.
            </summary>
            <param name="projectTypeGuid">The project type GUID.</param>
            <returns><see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectType"/> object holding information about the specified VisualStudio project 
            type; <c>null</c> if the project type is not registered.</returns>
        </member>
        <member name="T:Flubu.Builds.VSSolutionBrowsing.VSSolution">
            <summary>
            Represents a VisualStudio solution.
            </summary>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSSolution.Projects">
            <summary>
            Gets a read-only collection of <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo"/> objects for all of the projects in the solution.
            </summary>
            <value>A read-only collection of <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo"/> objects .</value>
        </member>
        <member name="P:Flubu.Builds.VSSolutionBrowsing.VSSolution.ProjectTypesDictionary">
            <summary>
            Gets or sets the VisualStudio project types dictionary.
            </summary>
            <value>The VisualStudio project types dictionary.</value>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSSolution.FindProjectById(System.Guid)">
            <summary>
            Finds the project by its unique id.
            </summary>
            <param name="projectGuid">The project's GUID.</param>
            <returns>The <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo"/> object representing the project.</returns>
            <exception cref="T:System.ArgumentException">The project was not found.</exception>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSSolution.ForEachProject(System.Action{Flubu.Builds.VSSolutionBrowsing.VSProjectInfo})">
            <summary>
            Performs the specified action on each project of the solution.
            </summary>
            <param name="action">The action delegate to perform on each project.</param>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSSolution.Load(System.String)">
            <summary>
            Loads the specified VisualStudio solution file and returns a <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSSolution"/> representing the solution.
            </summary>
            <param name="fileName">The name of the solution file.</param>
            <returns>A <see cref="T:Flubu.Builds.VSSolutionBrowsing.VSSolution"/> representing the solution.</returns>
        </member>
        <member name="M:Flubu.Builds.VSSolutionBrowsing.VSSolution.LoadProjects">
            <summary>
            Loads the VisualStudio project files and fills the project data into <see cref="P:Flubu.Builds.VSSolutionBrowsing.VSProjectWithFileInfo.Project"/> 
            properties for each of the project in the solution.
            </summary>
        </member>
        <member name="T:Flubu.Services.ICommonTasksFactory">
            <summary>
            Factory for some Flubu tasks.
            </summary>
            <remarks>This factory is used as an abstraction layer so the tasks can be more testable.</remarks>
        </member>
        <member name="T:Flubu.Services.IFlubuEnvironmentService">
            <summary>
            An abstraction layer for various <see cref="T:Flubu.FlubuEnvironment"/> utility methods.
            </summary>
        </member>
        <member name="M:Flubu.Services.IFlubuEnvironmentService.ListAvailableMSBuildToolsVersions">
            <summary>
            Returns a sorted dictionary of all MSBuild tools versions that are available on the system.
            </summary>
            <remarks>The method scans through the registry (<c>HKLM\SOFTWARE\Microsoft\MSBuild\ToolsVersions</c> path)
            to find the available tools versions.</remarks>
            <returns>A sorted dictionary whose keys are tools versions (2.0, 3.5, 4.0, 12.0 etc.) and values are paths to the
            tools directories (and NOT the <c>MSBuild.exe</c> itself!). The entries are sorted ascendingly by version numbers.</returns>
        </member>
        <member name="P:Flubu.FlubuEnvironment.IsWinServer2003">
            <summary>
            Gets a value indicating whether the script is running on Windows Server 2003.
            </summary>
            <value>
                <c>true</c> if the script is running on Windows Server 2003; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Flubu.FlubuEnvironment.SystemRootDir">
            <summary>
            Gets the Windows system root directory path.
            </summary>
            <value>The Windows system root directory path.</value>
        </member>
        <member name="M:Flubu.FlubuEnvironment.ListAvailableMSBuildToolsVersions">
            <summary>
            Returns a sorted dictionary of all MSBuild tools versions that are available on the system.
            </summary>
            <remarks>The method scans through the registry (<c>HKLM\SOFTWARE\Microsoft\MSBuild\ToolsVersions</c> path)
            to find the available tools versions.</remarks>
            <returns>A sorted dictionary whose keys are tools versions (2.0, 3.5, 4.0, 12.0 etc.) and values are paths to the
            tools directories (and NOT the <c>MSBuild.exe</c> itself!). The entries are sorted ascendingly by version numbers.</returns>
        </member>
        <member name="P:Flubu.FullPath.ParentPath">
            <summary>
            Gets the path that is a parent to the current path in this object.
            </summary>
            <value>The parent path.</value>
        </member>
        <member name="M:Flubu.ITaskSession.Reset">
            <summary>
            Resets the task session, cleaning all information about the previously executed targets. 
            </summary>
        </member>
        <member name="P:Flubu.LocalPath.ParentPath">
            <summary>
            Gets the path that is a parent to the current path in this object.
            </summary>
            <value>The parent path.</value>
        </member>
        <member name="P:Flubu.Targeting.ITarget.IsHidden">
            <summary>
            Gets a value indicating whether this target is hidden. Hidden targets will not be
            visible in the list of targets displayed to the user as help.
            </summary>
            <value><c>true</c> if this target is hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Flubu.Targeting.ITarget.DependsOn(System.String[])">
            <summary>
            Specifies targets on which this target depends on.
            </summary>
            <param name="targetNames">The dependency target names.</param>
            <returns>This same instance of <see cref="T:Flubu.Targeting.ITarget"/>.</returns>
        </member>
        <member name="M:Flubu.Targeting.ITarget.OverrideDo(System.Action{Flubu.ITaskContext})">
            <summary>
            Overrides any previously specified target action with the new one.
            </summary>
            <param name="targetAction">The new target action to perform.</param>
            <returns>This same instance of <see cref="T:Flubu.Targeting.ITarget"/>.</returns>
            <remarks>The method works even if no target action was specified before.</remarks>
        </member>
        <member name="M:Flubu.Targeting.ITarget.SetAsDefault">
            <summary>
            Sets the target as the default target for the runner.
            </summary>
            <returns>This same instance of <see cref="T:Flubu.Targeting.ITarget"/>.</returns>
        </member>
        <member name="M:Flubu.Targeting.ITarget.SetAsHidden">
            <summary>
            Sets the target as hidden. Hidden targets will not be
            visible in the list of targets displayed to the user as help.
            </summary>
            <returns>This same instance of <see cref="T:Flubu.Targeting.ITarget"/>.</returns>
        </member>
        <member name="P:Flubu.Targeting.Target.Description">
            <summary>
            Gets the description of the target.
            </summary>
            <value>The description of the target.</value>
        </member>
        <member name="P:Flubu.Targeting.Target.IsHidden">
            <summary>
            Gets a value indicating whether this target is hidden. Hidden targets will not be
            visible in the list of targets displayed to the user as help.
            </summary>
            <value><c>true</c> if this target is hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Flubu.Targeting.Target.DependsOn(System.String[])">
            <summary>
            Specifies targets on which this target depends on.
            </summary>
            <param name="targetNames">The dependency target names.</param>
            <returns>This same instance of <see cref="T:Flubu.Targeting.ITarget"/>.</returns>
        </member>
        <member name="M:Flubu.Targeting.Target.SetAsDefault">
            <summary>
            Sets the target as the default target for the runner.
            </summary>
            <returns>This same instance of <see cref="T:Flubu.Targeting.ITarget"/>.</returns>
        </member>
        <member name="M:Flubu.Targeting.Target.SetAsHidden">
            <summary>
            Sets the target as hidden. Hidden targets will not be
            visible in the list of targets displayed to the user as help.
            </summary>
            <returns>This same instance of <see cref="T:Flubu.Targeting.ITarget"/>.</returns>
        </member>
        <member name="P:Flubu.Targeting.TargetTree.DefaultTarget">
            <summary>
            Gets the default target for this runner.
            </summary>
            <remarks>The default target is the one which will be executed if
            the target is not specified in the command line.</remarks>
            <value>The default target.</value>
        </member>
        <member name="M:Flubu.Targeting.TargetTree.HasTarget(System.String)">
            <summary>
            Determines whether the specified target exists.
            </summary>
            <param name="targetName">Name of the target.</param>
            <returns>
                <c>true</c> if the specified target exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Flubu.Targeting.TargetTree.TargetHelp(Flubu.ITaskContext)">
            <summary>
            The target for displaying help in the command line.
            </summary>
            <param name="context">The task context.</param>
        </member>
        <member name="F:Flubu.MessageBeepType.Default">
            <summary>
            Default message beep.
            </summary>
        </member>
        <member name="F:Flubu.MessageBeepType.Ok">
            <summary>
            OK message beep.
            </summary>
        </member>
        <member name="F:Flubu.MessageBeepType.Error">
            <summary>
            Error message beep.
            </summary>
        </member>
        <member name="F:Flubu.MessageBeepType.Question">
            <summary>
            Question message beep.
            </summary>
        </member>
        <member name="F:Flubu.MessageBeepType.Warning">
            <summary>
            Warning message beep.
            </summary>
        </member>
        <member name="F:Flubu.MessageBeepType.Information">
            <summary>
            Information message beep.
            </summary>
        </member>
        <member name="T:Flubu.MulticoloredConsoleLogger">
            <summary>
            A standard multi-colored console output for Flubu.
            </summary>
        </member>
        <member name="M:Flubu.MulticoloredConsoleLogger.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.MulticoloredConsoleLogger"/> class
            using the specified text writer.
            </summary>
            <param name="writer">The text writer to use to write log messages.</param>
        </member>
        <member name="M:Flubu.MulticoloredConsoleLogger.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Flubu.MulticoloredConsoleLogger.IsConsoleOutput">
            <summary>
            Gets a value indicating whether this logger logs to the <see cref="P:System.Console.Out"/>.
            </summary>
            <value>
                <c>true</c> if this instance uses console output; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Flubu.MulticoloredConsoleLogger.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">If <code>false</code>, cleans up native resources. 
            If <code>true</code> cleans up both managed and native resources</param>
        </member>
        <member name="F:Flubu.OperatingSystem.WindowsXP">
            <summary>
            Indicates the Windows XP operating system.
            </summary>
        </member>
        <member name="F:Flubu.OperatingSystem.WindowsServer2000">
            <summary>
            Indicates the Windows Server 2000 operating system.
            </summary>
        </member>
        <member name="F:Flubu.OperatingSystem.WindowsServer2003">
            <summary>
            Indicates the Windows Server 2003 operating system.
            </summary>
        </member>
        <member name="T:Flubu.ITask">
            <summary>
            Specifies basic properties and methods for a task.
            </summary>
        </member>
        <member name="P:Flubu.ITask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="M:Flubu.ITask.Execute(Flubu.ITaskContext)">
            <summary>
            Executes the task using the specified script execution environment.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="T:Flubu.TaskBase">
            <summary>
            A base abstract class from which tasks can be implemented.
            </summary>
        </member>
        <member name="P:Flubu.TaskBase.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.TaskBase.IsSafeToExecuteInDryRun">
            <summary>
            Gets a value indicating whether this instance is safe to execute in dry run mode.
            </summary>
            <value>
                <c>true</c> if this instance is safe to execute in dry run mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Flubu.TaskBase.Execute(Flubu.ITaskContext)">
            <summary>
            Executes the task using the specified script execution environment.
            </summary>
            <remarks>This method implements the basic reporting and error handling for
            classes which inherit the <see cref="T:Flubu.TaskBase"/> class.</remarks>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.TaskBase.LogDuration">
            <summary>
            Gets a value indicating whether the duration of the task should be logged after the task
            has finished.
            </summary>
            <value><c>true</c> if duration should be logged; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Flubu.TaskBase.DoExecute(Flubu.ITaskContext)">
            <summary>
            Abstract method defining the actual work for a task.
            </summary>
            <remarks>This method has to be implemented by the inheriting task.</remarks>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="M:Flubu.TaskSession.Complete">
            <summary>
            Marks the runner as having completed its work successfully. This is the last method
            that should be called on the runner before it gets disposed.
            </summary>
        </member>
        <member name="T:Flubu.Tasks.FileSystem.GetAssemblyVersionTask">
            <summary>
            Retrieves .NET assembly version from .NET assembly.
            </summary>
            <remarks>
            If file does not have file version information, setting value is set to null.
            </remarks>
        </member>
        <member name="M:Flubu.Tasks.FileSystem.GetAssemblyVersionTask.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.FileSystem.GetAssemblyVersionTask"/> class.
            </summary>
            <param name="file">File name of the .NET assembly.</param>
            <param name="setting">Name of setting to which assembly version is stored.</param>
        </member>
        <member name="T:Flubu.Tasks.FileSystem.GetFileVersionTask">
            <summary>
            Retrieves file version information from local file.
            </summary>
        </member>
        <member name="M:Flubu.Tasks.FileSystem.GetFileVersionTask.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.FileSystem.GetFileVersionTask"/> class.
            </summary>
            <param name="file">File name of the file whose version should be retrieved.</param>
            <param name="setting">Name of setting to which file version is stored.</param>
        </member>
        <member name="T:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask">
            <summary>
            Copies a directory tree from the source to the destination.
            </summary>
        </member>
        <member name="M:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask"/> class
            using a specified source and destination path and an indicator whether to overwrite existing files.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="overwriteExisting">if set to <c>true</c> the task will overwrite existing destination files.</param>
        </member>
        <member name="P:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask.CopiedFilesList">
            <summary>
            Gets the list of all destination files that were copied.
            </summary>
            <value>The list of all destination files that were copied.</value>
        </member>
        <member name="P:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask.ExclusionPattern">
            <summary>
            Gets or sets the exclusion regular expression pattern for files.
            </summary>
            <remarks>All files whose paths match this regular expression
            will not be copied. If the <see cref="P:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask.ExclusionPattern"/> is <c>null</c>, it will be ignored.</remarks>
            <value>The exclusion pattern.</value>
        </member>
        <member name="P:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask.InclusionPattern">
            <summary>
            Gets or sets the inclusion regular expression pattern for files.
            </summary>
            <remarks>All files whose paths match this regular expression
            will be copied. If the <see cref="P:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask.InclusionPattern"/> is <c>null</c>, it will be ignored.</remarks>
            <value>The inclusion pattern.</value>
        </member>
        <member name="P:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="M:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask.Execute(Flubu.ITaskContext,System.String,System.String,System.Boolean)">
            <summary>
            Copies a directory tree from the source to the destination.
            </summary>
            <param name="context">The script execution environment.</param>
            <param name="sourcePath">The source path.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="overwriteExisting">if set to <c>true</c> the task will overwrite existing destination files.</param>
        </member>
        <member name="M:Flubu.Tasks.FileSystem.CopyDirectoryStructureTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.Tasks.FileSystem.CopyFileTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.Tasks.FileSystem.DeleteDirectoryTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.Tasks.FileSystem.DeleteFilesTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="T:Flubu.Tasks.FileSystem.SetAccessRuleTask">
            <summary>
            Sets a file access rule for a specified file path and identities.
            </summary>
        </member>
        <member name="P:Flubu.Tasks.FileSystem.SetAccessRuleTask.Path">
            <summary>
            Gets or sets the file path for which the access rule should be set.
            </summary>
            <value>The file path for which the access rule should be set.</value>
        </member>
        <member name="P:Flubu.Tasks.FileSystem.SetAccessRuleTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="M:Flubu.Tasks.FileSystem.SetAccessRuleTask.#ctor(System.String,System.String,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.FileSystem.SetAccessRuleTask"/> class using a specified
            file path, an identity, file system rights and access control type.
            </summary>
            <remarks>This method overload should be used when a single identity needs to be specified.</remarks>
            <param name="path">The file path.</param>
            <param name="identity">Identity (example: "Network Service").</param>
            <param name="fileSystemRights">File system rights.</param>
            <param name="accessControlType">Type of the access control.</param>
        </member>
        <member name="M:Flubu.Tasks.FileSystem.SetAccessRuleTask.#ctor(System.String,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.FileSystem.SetAccessRuleTask"/> class using a specified
            file path, file system rights and access control type.
            </summary>
            <remarks>This method overload should be used when the multiple identities need to be specified.</remarks>
            <param name="path">The file path.</param>
            <param name="fileSystemRights">File system rights.</param>
            <param name="accessControlType">Type of the access control.</param>
        </member>
        <member name="M:Flubu.Tasks.FileSystem.SetAccessRuleTask.AddIdentity(System.String)">
            <summary>
            Adds an identity to a list of identities for which the access rule will be applied.
            </summary>
            <param name="identity">The identity.</param>
        </member>
        <member name="M:Flubu.Tasks.FileSystem.SetAccessRuleTask.Execute(Flubu.ITaskContext,System.String,System.String,System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.AccessControlType)">
            <summary>
            Sets a file access rule for a specified file path and identities.
            </summary>
            <param name="context">The script execution environment.</param>
            <param name="path">The file path.</param>
            <param name="identity">Identity (example: "Network Service").</param>
            <param name="fileSystemRights">File system rights.</param>
            <param name="accessControlType">Type of the access control.</param>
        </member>
        <member name="M:Flubu.Tasks.FileSystem.SetAccessRuleTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="T:Flubu.Tasks.Configuration.LogScriptEnvironmentTask">
            <summary>
            Logs important environment information (machine name, OS version...).
            </summary>
        </member>
        <member name="P:Flubu.Tasks.Configuration.LogScriptEnvironmentTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.Tasks.Configuration.LogScriptEnvironmentTask.IsSafeToExecuteInDryRun">
            <summary>
            Gets a value indicating whether this instance is safe to execute in dry run mode.
            </summary>
            <value>
                <c>true</c> if this instance is safe to execute in dry run mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Flubu.Tasks.Configuration.LogScriptEnvironmentTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="T:Flubu.Tasks.Configuration.ReadConfigurationTask">
            <summary>
            Reads a configuration in XML form and stores it into <see cref="T:Flubu.ITaskContext"/>
            configuration settings;
            </summary>
        </member>
        <member name="P:Flubu.Tasks.Configuration.ReadConfigurationTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.Tasks.Configuration.ReadConfigurationTask.IsSafeToExecuteInDryRun">
            <summary>
            Gets a value indicating whether this instance is safe to execute in dry run mode.
            </summary>
            <value>
                <c>true</c> if this instance is safe to execute in dry run mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Flubu.Tasks.Configuration.ReadConfigurationTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.Tasks.Misc.Log4NetConfigTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.Tasks.Misc.Log4NetConfigTask.RootPriority">
            <summary>
            Gets or sets the root priority. 
            </summary>
            <value>The root priority. If set to <c>null</c>, the task does not modify the existing values in config files.</value>
        </member>
        <member name="P:Flubu.Tasks.Misc.Log4NetConfigTask.AppendToFile">
            <summary>
            Gets or sets the AppendToFile setting for the appenders.
            </summary>
            <value>The AppendToFile setting for the appenders. If set to <c>null</c>,
            the setting will not be modified in configuration files.</value>
        </member>
        <member name="M:Flubu.Tasks.Misc.Log4NetConfigTask.AddConfigFile(System.String,System.String)">
            <summary>
            Adds the config file to the list of config files to be configured.
            </summary>
            <param name="configFileName">Name of the config file.</param>
            <param name="log4NetConfigXpath">XPath to the log4net configuration block.</param>
        </member>
        <member name="M:Flubu.Tasks.Misc.Log4NetConfigTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="T:Flubu.Tasks.Misc.SendMailTask">
            <summary>
            Sends an email.
            </summary>
        </member>
        <member name="P:Flubu.Tasks.Misc.SendMailTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.Tasks.Misc.SendMailTask.SmtpServer">
            <summary>
            Gets or sets the SMTP server to use.
            </summary>
            <value>The SMTP server.</value>
        </member>
        <member name="P:Flubu.Tasks.Misc.SendMailTask.From">
            <summary>
            Gets or sets the "from" field.
            </summary>
            <value>"From" field.</value>
        </member>
        <member name="P:Flubu.Tasks.Misc.SendMailTask.To">
            <summary>
            Gets or sets the "to" address list. The individual addresses have to be separated by the ';' character.
            </summary>
            <value>"To" address list.</value>
        </member>
        <member name="P:Flubu.Tasks.Misc.SendMailTask.CC">
            <summary>
            Gets or sets the "cc" address list. The individual addresses have to be separated by the ';' character.
            </summary>
            <value>"Cc" address list.</value>
        </member>
        <member name="P:Flubu.Tasks.Misc.SendMailTask.Bcc">
            <summary>
            Gets or sets the "Bcc" address list. The individual addresses have to be separated by the ';' character.
            </summary>
            <value>"Bcc" address list.</value>
        </member>
        <member name="P:Flubu.Tasks.Misc.SendMailTask.Subject">
            <summary>
            Gets or sets the subject of the mail.
            </summary>
            <value>The subject of the mail.</value>
        </member>
        <member name="P:Flubu.Tasks.Misc.SendMailTask.Body">
            <summary>
            Gets or sets the body of the mail.
            </summary>
            <value>The body of the mail.</value>
        </member>
        <member name="M:Flubu.Tasks.Misc.SendMailTask.ParseAddresses(System.Net.Mail.MailAddressCollection,System.String)">
            <summary>
            Parses the address list in form of a string with individual addresses separated by the ';' character. The parsed
            addresses are then stored into the specified <see cref="T:System.Net.Mail.MailAddressCollection"/>.
            </summary>
            <param name="collection">The mail address collection the parsed addresses should be stored into.</param>
            <param name="addresses">The addresses in form of a string.</param>
        </member>
        <member name="M:Flubu.Tasks.Misc.SendMailTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="F:Flubu.Tasks.Msmq.CreateMessageQueueMode.FailIfAlreadyExists">
            <summary>
            If the message queue already exists, the task should fail.
            </summary>
        </member>
        <member name="F:Flubu.Tasks.Msmq.CreateMessageQueueMode.RecreateIfExists">
            <summary>
            If the message queue already exists, the message queue should be recreated.
            </summary>
        </member>
        <member name="F:Flubu.Tasks.Msmq.CreateMessageQueueMode.DoNothingIfExists">
            <summary>
            If the message queue already exists, the task should do nothing.
            </summary>
        </member>
        <member name="T:Flubu.Tasks.Msmq.CreateMessageQueueTask">
            <summary>
            Creates a message queue with the specified path.
            </summary>
        </member>
        <member name="P:Flubu.Tasks.Msmq.CreateMessageQueueTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="M:Flubu.Tasks.Msmq.CreateMessageQueueTask.#ctor(System.String,System.Boolean,Flubu.Tasks.Msmq.CreateMessageQueueMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.Msmq.CreateMessageQueueTask"/> class
            using a specified message queue path and an indicator of whether the queue
            should be transactional or not.
            </summary>
            <param name="messageQueuePath">The message queue path.</param>
            <param name="isTransactional">if set to <c>true</c> the queue will be transactional; otherwise <c>false</c>.</param>
            <param name="mode">The task mode.</param>
        </member>
        <member name="M:Flubu.Tasks.Msmq.CreateMessageQueueTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.Tasks.Msmq.DeleteMessageQueueTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="M:Flubu.Tasks.Msmq.DeleteMessageQueueTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.Tasks.Msmq.PurgeMessageQueueTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="M:Flubu.Tasks.Msmq.PurgeMessageQueueTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.Tasks.Processes.IRunProgramTask.LastExitCode">
            <summary>
            Gets the exit code of the last external program that was run by the runner.
            </summary>
            <value>The exit code of the last external program.</value>
        </member>
        <member name="M:Flubu.Tasks.Processes.IRunProgramTask.ExecutionTimeout(System.TimeSpan)">
            <summary>
            Set the execution timeout.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>This instance</returns>
        </member>
        <member name="T:Flubu.Tasks.Processes.KillProcessTask">
            <summary>
            Kills a specified process.
            </summary>
        </member>
        <member name="P:Flubu.Tasks.Processes.KillProcessTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="M:Flubu.Tasks.Processes.KillProcessTask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.Processes.KillProcessTask"/> class using a specified process name.
            </summary>
            <param name="processName">Name of the process to be killed.</param>
        </member>
        <member name="P:Flubu.Tasks.Processes.RunProgramTask.LastExitCode">
            <summary>
            Gets the exit code of the last external program that was run by the runner.
            </summary>
            <value>The exit code of the last external program.</value>
        </member>
        <member name="M:Flubu.Tasks.Processes.RunProgramTask.ExecutionTimeout(System.TimeSpan)">
            <summary>
            Set the execution timeout.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>This instance</returns>
        </member>
        <member name="T:Flubu.Tasks.Text.EvaluateXmlTask">
            <summary>
            Evaluates XPath expressions on a specified XML file and stores results in <seealso cref="T:Flubu.ITaskContext"/> properties.
            </summary>
        </member>
        <member name="P:Flubu.Tasks.Text.EvaluateXmlTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.Tasks.Text.EvaluateXmlTask.IsSafeToExecuteInDryRun">
            <summary>
            Gets a value indicating whether this instance is safe to execute in dry run mode.
            </summary>
            <value>
                <c>true</c> if this instance is safe to execute in dry run mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Flubu.Tasks.Text.EvaluateXmlTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:Flubu.Tasks.Text.ReplaceTokensTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="T:Flubu.Tasks.Text.PeekXmlTask">
            <summary>
            Retrieves a value from an XML file.
            </summary>
            <remarks>
            If provided XPath does not find any matches, null is stored in specified configuration setting.
            If provided XPath matches exactly one node, it's value is stored as <see cref="T:System.String"/> in specified configuration setting.
            If provided XPath matches multiple nodes, their values are stored as <see cref="T:System.String"/>[] in specified configuration setting.
            </remarks>
        </member>
        <member name="P:Flubu.Tasks.Text.PeekXmlTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.Tasks.Text.PeekXmlTask.IsSafeToExecuteInDryRun">
            <summary>
            Gets a value indicating whether this instance is safe to execute in dry run mode.
            </summary>
            <value>
                <c>true</c> if this instance is safe to execute in dry run mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Flubu.Tasks.Text.PeekXmlTask.Execute(Flubu.ITaskContext,System.String,System.String,System.String)">
            <summary>
            Reads a specified value from an XML file and stores it as a specified configuration setting.
            </summary>
            <param name="environment">The script execution environment.</param>
            <param name="xmlFileName">The name of the configuration file.</param>
            <param name="xpath">The xpath of the value to read.</param>
            <param name="configurationSettingName">Name of the configuration setting into which the XML value will be stored.</param>
            <remarks>
            If provided <paramref name="xpath"/> does not find any matches, null is stored in configuration setting <paramref name="configurationSettingName"/>.
            If provided <paramref name="xpath"/> matches exactly one node, it's value is stored as <see cref="T:System.String"/> in configuration setting <paramref name="configurationSettingName"/>.
            If provided <paramref name="xpath"/> matches multiple nodes, their values are stored as <see cref="T:System.String"/>[] in configuration setting <paramref name="configurationSettingName"/>.
            </remarks>
        </member>
        <member name="M:Flubu.Tasks.Text.PeekXmlTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="T:Flubu.Tasks.Text.UpdateXmlFileTask">
            <summary>
            Updates an XML file using the specified update commands.
            </summary>
        </member>
        <member name="P:Flubu.Tasks.Text.UpdateXmlFileTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="M:Flubu.Tasks.Text.UpdateXmlFileTask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.Text.UpdateXmlFileTask"/> class with
            the specified XML file to be updated.
            </summary>
            <param name="fileName">The fileName of the XML file.</param>
        </member>
        <member name="M:Flubu.Tasks.Text.UpdateXmlFileTask.UpdatePath(System.String,System.String)">
            <summary>
            Adds an "update" command to the list of commands to be performed on the XML file.
            </summary>
            <param name="xpath">XPath for the nodes which should be updated.</param>
            <param name="value">New value of the selected nodes.</param>
        </member>
        <member name="M:Flubu.Tasks.Text.UpdateXmlFileTask.DeletePath(System.String)">
            <summary>
            Adds an "delete" command to the list of commands to be performed on the XML file.
            </summary>
            <param name="xpath">XPath for the nodes which should be deleted.</param>
        </member>
        <member name="M:Flubu.Tasks.Text.UpdateXmlFileTask.AddPath(System.String,System.String,System.String)">
            <summary>
            Adds an "add" command to the list of commands to be performed on the XML file.
            </summary>
            <param name="rootXpath">XPath for the root node on which an addition should be performed.</param>
            <param name="childNodeName">Name of the new child node.</param>
            <param name="value">The value for the new child node.</param>
        </member>
        <member name="M:Flubu.Tasks.Text.UpdateXmlFileTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Method defining the actual work for a task.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="T:Flubu.Tasks.Text.VisitXmlFileTask">
            <summary>
            Runs XPath queries on the specified XML file and provides an interface for visiting each query result.
            </summary>
        </member>
        <member name="M:Flubu.Tasks.Text.VisitXmlFileTask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.Text.VisitXmlFileTask"/> class with the specified
            XML file to be analyzed. 
            </summary>
            <param name="xmlFileName">
            File name of the XML file to be queried.
            </param>
        </member>
        <member name="P:Flubu.Tasks.Text.VisitXmlFileTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.Tasks.Text.VisitXmlFileTask.IsSafeToExecuteInDryRun">
            <summary>
            Gets a value indicating whether this instance is safe to execute in dry run mode.
            </summary>
            <value>
                <c>true</c> if this instance is safe to execute in dry run mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Flubu.Tasks.Text.VisitXmlFileTask.AddVisitor(System.String,System.Func{System.Xml.XmlNode,System.Boolean})">
            <summary>
            Adds a visitor to be used for querying a specific XPath.
            </summary>
            <param name="xpath">XPath to be queried.</param>
            <param name="visitorFunc">The function that should be called on each XML node found by the query.</param>
            <returns>This same instance of the <see cref="T:Flubu.Tasks.Text.VisitXmlFileTask"/>.</returns>
        </member>
        <member name="T:Flubu.Tasks.Text.XsltTransformTask">
            <summary>
            Transforms XML file using a XSLT stylesheet.
            </summary>
        </member>
        <member name="P:Flubu.Tasks.Text.XsltTransformTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="P:Flubu.Tasks.Text.XsltTransformTask.InputFile">
            <summary>
            Gets or sets the input XML file path.
            </summary>
            <value>The input file.</value>
        </member>
        <member name="P:Flubu.Tasks.Text.XsltTransformTask.OutputFile">
            <summary>
            Gets or sets the output XML file path.
            </summary>
            <value>The output file.</value>
        </member>
        <member name="P:Flubu.Tasks.Text.XsltTransformTask.XsltFile">
            <summary>
            Gets or sets the XSLT file path.
            </summary>
            <value>The XSLT file.</value>
        </member>
        <member name="M:Flubu.Tasks.Text.XsltTransformTask.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.Text.XsltTransformTask"/> class
            that will transform a specified input file to a specified output file using the specified XSLT file.
            </summary>
            <param name="inputFile">The input file path.</param>
            <param name="outputFile">The output file path.</param>
            <param name="xsltFile">The XSLT file path.</param>
        </member>
        <member name="M:Flubu.Tasks.Text.XsltTransformTask.Execute(Flubu.ITaskContext,System.String,System.String,System.String)">
            <summary>
            Transforms a specified input file to a specified output file using the specified XSLT file.
            </summary>
            <param name="environment">The script execution environment.</param>
            <param name="inputFile">The input file path.</param>
            <param name="outputFile">The output file path.</param>
            <param name="xsltFile">The XSLT file path.</param>
        </member>
        <member name="M:Flubu.Tasks.Text.XsltTransformTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="F:Flubu.Tasks.UserAccounts.CreateUserAccountMode.FailIfAlreadyExists">
            <summary>
            If the user account already exists, the task should fail.
            </summary>
        </member>
        <member name="F:Flubu.Tasks.UserAccounts.CreateUserAccountMode.UpdateIfExists">
            <summary>
            If the user account already exists, it should be updated.
            </summary>
        </member>
        <member name="F:Flubu.Tasks.UserAccounts.CreateUserAccountMode.DoNothingIfExists">
            <summary>
            If the user account already exists, the task should do nothing.
            </summary>
        </member>
        <member name="M:Flubu.Tasks.UserAccounts.ImpersonateUserTask.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Flubu.Tasks.UserAccounts.ImpersonateUserTask.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">If <code>false</code>, cleans up native resources. 
            If <code>true</code> cleans up both managed and native resources</param>
        </member>
        <member name="F:Flubu.Tasks.WindowsServices.ControlWindowsServiceMode.Start">
            <summary>
            Start the Windows service.
            </summary>
        </member>
        <member name="F:Flubu.Tasks.WindowsServices.ControlWindowsServiceMode.Stop">
            <summary>
            Stop the Windows service.
            </summary>
        </member>
        <member name="T:Flubu.Tasks.WindowsServices.InstallWindowsServiceMode">
            <summary>
            The operating mode for the <see cref="T:Flubu.Tasks.WindowsServices.InstallWindowsServiceTask"/> task.
            </summary>
        </member>
        <member name="F:Flubu.Tasks.WindowsServices.InstallWindowsServiceMode.FailIfAlreadyInstalled">
            <summary>
            If the Windows service already exists, the task fails.
            </summary>
        </member>
        <member name="F:Flubu.Tasks.WindowsServices.InstallWindowsServiceMode.ReinstallIfExists">
            <summary>
            If the Windows service already exists, it is reinstalled.
            </summary>
        </member>
        <member name="F:Flubu.Tasks.WindowsServices.InstallWindowsServiceMode.DoNothingIfExists">
            <summary>
            If the Windows service already exists, the task does nothing.
            </summary>
        </member>
        <member name="T:Flubu.Tasks.WindowsServices.InstallWindowsServiceTask">
            <summary>
            Installs a specified Windows service.
            </summary>
        </member>
        <member name="P:Flubu.Tasks.WindowsServices.InstallWindowsServiceTask.ServiceUninstallationWaitTime">
            <summary>
            Gets or sets the period to wait after service uninstallation before continuing with reinstallation.
            </summary>
            <value>The service uninstallation wait time.</value>
        </member>
        <member name="P:Flubu.Tasks.WindowsServices.InstallWindowsServiceTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="M:Flubu.Tasks.WindowsServices.InstallWindowsServiceTask.#ctor(System.String,System.String,Flubu.Tasks.WindowsServices.InstallWindowsServiceMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.WindowsServices.InstallWindowsServiceTask"/> class
            with the specified path to the Windows service executable.
            </summary>
            <param name="executablePath">The executable path.</param>
            <param name="serviceName">The Windows service name.</param>
            <param name="mode">Mode of the installation.</param>
        </member>
        <member name="M:Flubu.Tasks.WindowsServices.InstallWindowsServiceTask.Execute(Flubu.ITaskContext,System.String,System.String,Flubu.Tasks.WindowsServices.InstallWindowsServiceMode)">
            <summary>
            Executes the task.
            </summary>
            <param name="environment">The environment.</param>
            <param name="executablePath">The executable path.</param>
            <param name="serviceName">Name of the service.</param>
            <param name="mode">The task mode.</param>
        </member>
        <member name="M:Flubu.Tasks.WindowsServices.InstallWindowsServiceTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="T:Flubu.Tasks.WindowsServices.StopWindowsServiceIfExistsTask">
            <summary>
            Stops the specified Windows service if it exists on the system.
            </summary>
        </member>
        <member name="P:Flubu.Tasks.WindowsServices.StopWindowsServiceIfExistsTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="M:Flubu.Tasks.WindowsServices.StopWindowsServiceIfExistsTask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Flubu.Tasks.WindowsServices.StopWindowsServiceIfExistsTask"/> class
            with the specified service name.
            </summary>
            <param name="serviceName">Name of the service.</param>
        </member>
        <member name="M:Flubu.Tasks.WindowsServices.StopWindowsServiceIfExistsTask.DoExecute(Flubu.ITaskContext)">
            <summary>
            Method defining the actual work for a task.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="T:BuildScripts.BuildScript">
            <summary>
            Build script template.
            </summary>
        </member>
    </members>
</doc>
